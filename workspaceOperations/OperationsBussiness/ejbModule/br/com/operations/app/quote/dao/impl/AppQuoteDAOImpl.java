package br.com.operations.app.quote.dao.impl;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;

import oracle.jdbc.OracleTypes;
import br.com.operations.app.quote.dao.AppQuoteDAO;
import br.com.operations.app.quote.jpa.Jpa;
import br.com.operations.app.quote.model.QuoteModel;
import br.com.operations.app.quote.to.QuoteItemTO;

@Stateless
public class AppQuoteDAOImpl extends Jpa implements AppQuoteDAO {

	@Override
	public List<QuoteItemTO> executeStoredProcedure(int idTaxQuote) {
		
//		EntityManager entityManager = super.em;
//		
//		StoredProcedureQuery storedProcedure = entityManager.createStoredProcedureQuery("SPTAXQUOTEPREPARATION");
//		storedProcedure.registerStoredProcedureParameter("IDTAXQUOTE", Integer.class, ParameterMode.IN);
//		storedProcedure.registerStoredProcedureParameter("RESULTSET", void.class , ParameterMode.OUT);
//		
//		storedProcedure.setParameter("IDTAXQUOTE", idTaxQuote);
//		storedProcedure.setParameter("RESULTSET", lista);
//		
//		storedProcedure.execute();
//		
//		return storedProcedure.getResultList();
		
		Connection conn = null;
		
		CallableStatement callableStatement = null;
		
		ResultSet rs = null;
		
		List<QuoteItemTO> listaQuoteItemTOs = new ArrayList<>();
		
		try{
			
			conn = super.getConnection();
			
			callableStatement = conn.prepareCall("{ call SPTAXQUOTEPREPARATION(?, ?) }");
			
			callableStatement.setInt(1, idTaxQuote);
			callableStatement.registerOutParameter(2, OracleTypes.CURSOR);
			
			callableStatement.execute(); 
			
			rs = (ResultSet) callableStatement.getObject(2);
									
			while(rs.next()){
				QuoteItemTO quoteItemTO = new QuoteItemTO();
				
				quoteItemTO.setId(rs.getLong("id"));
				quoteItemTO.setIdTaxQuoteItem(rs.getLong("idTaxQuoteItem"));
				quoteItemTO.setIdTaxQuoteItemOriginal(rs.getLong("idTaxQuoteItemOriginal"));
				quoteItemTO.setIdAdmMaterial(rs.getLong("idADMMaterial"));
				quoteItemTO.setIdAdmOrigin(rs.getLong("idADMOrigin"));
				quoteItemTO.setIdAdmOriginHW(rs.getLong("idADMOriginHW"));
				quoteItemTO.setIdAdmOriginMT(rs.getLong("idADMOriginMT"));
				quoteItemTO.setIdAdmOriginSW(rs.getLong("idADMOriginSW"));
				
				quoteItemTO.setIdAdmDestination(rs.getLong("idADMDestination"));
				quoteItemTO.setIdAdmMaterialClass(rs.getLong("idADMMaterialClass"));
				quoteItemTO.setIdAdmMaterialClassOriginal(rs.getLong("idADMMaterialClassOriginal"));
				quoteItemTO.setIdAdmMaterialClassPai(rs.getLong("idADMMaterialClassPai"));
				quoteItemTO.setIdAdmProductType(rs.getLong("idADMProductType"));
				quoteItemTO.setIdAdmDiscClass(rs.getLong("idADMDiscClass"));
				quoteItemTO.setfStandardISSRule(rs.getInt("fStandardISSRule"));
				quoteItemTO.setfStandardISSRuleSW(rs.getInt("fStandardISSRuleSW"));
				quoteItemTO.setfLMType(rs.getInt("fLMType"));
				quoteItemTO.setfVariacaoPartNumber(rs.getInt("FVARIACAOPARTNUMBER"));
				quoteItemTO.setfAvailableMaterialClass(rs.getInt("fAvaliableMaterialClass"));
				quoteItemTO.setfAvailableMaterial(rs.getInt("fAvailableMaterial"));
				quoteItemTO.setfAvailable(rs.getInt("fAvaliable"));
				quoteItemTO.setfSubstituicaoTributariaSaidaMaterialClass(rs.getInt("fSTSaidaMatClass"));
				quoteItemTO.setfSubstituicaoTributariaSaida(rs.getInt("fSTSaida"));
				quoteItemTO.setfSubstituicaoTributariaEntradaMaterialClass(rs.getInt("fSTEntradaMatClass"));
				quoteItemTO.setfSubstituicaoTributariaEntrada(rs.getInt("fSTEntrada"));
				quoteItemTO.setfISSEspecialMaterialClass(rs.getInt("fISSEspecialMaterialClass"));
				quoteItemTO.setfISSEspecial(rs.getInt("fISSEspecial"));
				quoteItemTO.setfReadOnly(rs.getInt("fReadOnly"));
				quoteItemTO.setfReadOnlyLine(rs.getInt("fReadOnlyLine"));
				quoteItemTO.setfForceImporting(rs.getInt("fForceImporting"));
				quoteItemTO.setfDestinationWithProtocol(rs.getInt("fDestinationWithProtocol"));
				quoteItemTO.setfTipoCalculo(rs.getInt("fTipoCalculo"));
				quoteItemTO.setfQuote(rs.getInt("fQuote"));
				quoteItemTO.setfReady(rs.getInt("fReady"));
				quoteItemTO.setfItemPai(rs.getInt("fItemPai"));
				quoteItemTO.setfAutoGeneratedBySystem(rs.getInt("fAutoGeneratedBySystem"));
				quoteItemTO.setfOrigemDaMercadoria(rs.getInt("fOrigemDaMercadoria"));
				quoteItemTO.setfMercadoriaImportada(rs.getInt("fMercadoriaImportada"));
				quoteItemTO.setsGroupNumber(rs.getString("sGroupNumber"));
				quoteItemTO.setiTaxModel(rs.getInt("iTAXModel"));
				quoteItemTO.setiLineNumber(rs.getInt("iLineNumber"));
				quoteItemTO.setiFlagTypeLine(rs.getInt("iFlagTypeLine"));
				quoteItemTO.setsOrdem(rs.getString("sOrdem"));
				quoteItemTO.setiRowCount(rs.getInt("iRowCount"));
				quoteItemTO.setsLabelProductTypePT(rs.getString("sLabelProductTypePT"));
				quoteItemTO.setsLabelProductType(rs.getString("sLabelProductType"));
				quoteItemTO.setsCode(rs.getString("sCode"));
				quoteItemTO.setsNCMMaterialClass(rs.getString("sNCMMaterialClass"));
				quoteItemTO.setsNCMMaterialClassPai(rs.getString("sNCMMaterialClassPai"));
				quoteItemTO.setsNCM(rs.getString("sNCM"));
				quoteItemTO.setsNCMOriginal(rs.getString("sNCMOriginal"));
				quoteItemTO.setsModelMaterial(rs.getString("sModelMaterial"));
				quoteItemTO.setsModel(rs.getString("sModel"));
				quoteItemTO.setsDescriptionMaterial(rs.getString("sDescriptionMaterial"));
				quoteItemTO.setsDescription(rs.getString("sDescription"));
				quoteItemTO.setsImpDescription(rs.getString("sImpDescription"));
				quoteItemTO.setrQty(rs.getInt("rQty"));
				quoteItemTO.setmDollarRate(rs.getDouble("mDollarRate"));
				quoteItemTO.setmDealPrice(rs.getDouble("mDealPrice"));
				quoteItemTO.setmImportedListPrice(rs.getDouble("mImportedListPrice"));
				quoteItemTO.setmImportedCost(rs.getDouble("mImportedCost"));
//				quoteItemTO.setmTotalCost(rs.getDouble("mTotalCost"));
				quoteItemTO.setmImportedDealPrice(rs.getDouble("mImportedDealPrice"));
				quoteItemTO.setmCostMaterialMaterial(rs.getDouble("mCostMaterialMaterial"));
				quoteItemTO.setmCostMaterial(rs.getDouble("mCostMaterial"));
				quoteItemTO.setmAdditionalCostValueDollar(rs.getDouble("mAdditionalCostValueDollar"));
				quoteItemTO.setmAdditionalCostFreight(rs.getDouble("mAdditionalCostValueFreight"));
				quoteItemTO.setmAdditionalCostProject(rs.getDouble("mAdditionalCostProjectCost"));
				quoteItemTO.setmAdditionalCostTraining(rs.getDouble("mAdditionalCostTraining"));
				quoteItemTO.setmAdditionalCostOtherCost(rs.getDouble("mAdditionalCostOtherCosts"));
				quoteItemTO.setsCommentsOtherCost(rs.getString("sCommentsOtherCost"));
				quoteItemTO.setmDollarRateAdditionalCost(rs.getDouble("mDollarRateAdditionalCost"));
				quoteItemTO.setmCostCalculated(rs.getDouble("mCostCalculated"));
				quoteItemTO.setmSuggestedMargin(rs.getDouble("mSuggestedMargin"));
				quoteItemTO.setmUnitSuggestedNetPrice(rs.getDouble("mUnitSuggestedNetPrice"));
				quoteItemTO.setmSuggestedNetPrice(rs.getDouble("mSuggestedNetPrice"));
				quoteItemTO.setmNetPrice(rs.getDouble("mNetPrice"));
				quoteItemTO.setmUnitNetPrice(rs.getDouble("mUnitNetPrice"));
				quoteItemTO.setmFatorEntrada(rs.getDouble("mFatorEntrada"));
				quoteItemTO.setmFatorCustoST(rs.getDouble("mFatorCustoST"));
				quoteItemTO.setmNetPriceBaseDeCalculo(rs.getDouble("mNetPriceBaseDeCalculo"));
				quoteItemTO.setmUnitNetPriceBaseDeCalculo(rs.getDouble("mUnitNetPriceBaseDeCalculo"));
				quoteItemTO.setrSuggestedMargin(rs.getFloat("rSuggestedMargin"));
				quoteItemTO.setrDiscClassDiscount(rs.getFloat("rDiscClassDiscount"));
				quoteItemTO.setrDiscount(rs.getFloat("rDiscount") * 100);
				quoteItemTO.setrFatorSaida(rs.getFloat("rFatorSaida"));
				quoteItemTO.setrFatorDisconto(rs.getFloat("rFatorDisconto"));
				quoteItemTO.setrICMSEstadoOrigem(rs.getFloat("rICMSEstadoOrigemOrigin"));
				quoteItemTO.setrICMSInternoOrigemOrigin(rs.getFloat("rICMSInternoOrigemOrigin"));
				quoteItemTO.setrICMSInterEstadualOrigemOrigin(rs.getFloat("rICMSInterEstadualOrigemOrigin"));
				quoteItemTO.setrICMSEstadoOrigemInternoMaterialClassOrigin(rs.getFloat("rICMSEstOriIntMatClassOrigin"));
				quoteItemTO.setrICMSEstadoDestinoDestination(rs.getFloat("rICMSEstDestDestination"));
				quoteItemTO.setrICMSMaterialClassMaterialClass(rs.getFloat("rICMSMatClassMatClass"));
				quoteItemTO.setrICMSInterEstadualDestination(rs.getFloat("rICMSInterEstadualDestination"));
				quoteItemTO.setrICMSInterEstadualMaterialImportadoDestination(rs.getFloat("rICMSIntEstMatImpDestination"));
				quoteItemTO.setrIVAMaterialClassDestination(rs.getFloat("rIVAMaterialClassDestination"));
				quoteItemTO.setrIVAMaterialImportadoMaterialClassDestination(rs.getFloat("rIVAMatImpMatClassDestination"));
				quoteItemTO.setrICMSInternoMaterialClassDestination(rs.getFloat("rICMSIntMatClassDestination"));
				quoteItemTO.setrICMSInterEstadual(rs.getFloat("rICMSInterEstadual"));
				quoteItemTO.setrICMSInterEstadualMaterialImportado(rs.getFloat("rICMSIntEstMatImportado"));
				quoteItemTO.setrICMSInterno(rs.getFloat("rICMSInterno"));
				quoteItemTO.setrIVA(rs.getFloat("rIVA"));
				quoteItemTO.setrIVAMaterialImportado(rs.getFloat("rIVAMaterialImportado"));
				quoteItemTO.setrIPIMaterialClass(rs.getFloat("rIPIMaterialClass"));
				quoteItemTO.setrPISProductType(rs.getFloat("rPISProductType"));
				quoteItemTO.setrIRProductType(rs.getFloat("rIRProductType"));
				quoteItemTO.setrCOFINSProductType(rs.getFloat("rCOFINSProductType"));
				quoteItemTO.setrCSSLProductType(rs.getFloat("rCSSLProductType"));
				quoteItemTO.setrISSOrigin(rs.getFloat("rISSOrigin"));
				quoteItemTO.setrISSSoftOrigin(rs.getFloat("rISSSoftOrigin"));
				quoteItemTO.setrISSOriginServ(rs.getFloat("rISSOriginServ"));
				quoteItemTO.setrIVAOrigin(rs.getFloat("rIVAOrigin"));
				quoteItemTO.setrIVAMaterialImportadoOrigin(rs.getFloat("rIVAMaterialImportadoOrigin"));
				quoteItemTO.setrICMSEstadoOrigem(rs.getFloat("rICMSEstadoOrigem"));
				quoteItemTO.setrICMSEstadoOrigemInterno(rs.getFloat("rICMSEstadoOrigemInterno"));
				quoteItemTO.setrICMSEstadoDestino(rs.getFloat("rICMSEstadoDestino"));
				quoteItemTO.setrICMSMaterialClass(rs.getFloat("rICMSMaterialClass"));
				quoteItemTO.setrICMSRecuperar(rs.getFloat("rICMSRecuperar"));
				quoteItemTO.setrICMSProprioARecuperar(rs.getFloat("rICMSProprioARecuperar"));
				quoteItemTO.setrIPI(rs.getFloat("rIPI"));
				quoteItemTO.setrIPIRecuperar(rs.getFloat("rIPIRecuperar"));
				quoteItemTO.setrPIS(rs.getFloat("rPIS"));
				quoteItemTO.setrCOFINS(rs.getFloat("rCOFINS"));
				quoteItemTO.setrIR(rs.getFloat("rIR"));
				quoteItemTO.setrCSSL(rs.getFloat("rCSSL"));
				quoteItemTO.setrISS(rs.getFloat("rISS"));
				quoteItemTO.setmUnitICMSEstadoOrigem(rs.getDouble("mUnitICMSEstadoOrigem"));
				quoteItemTO.setmUnitICMSEstadoOrigemInterno(rs.getDouble("mUnitICMSEstadoOrigemInterno"));
				quoteItemTO.setmUnitICMSEstadoDestino(rs.getDouble("mUnitICMSEstadoDestino"));
				quoteItemTO.setmUnitICMSMaterialClass(rs.getDouble("mUnitICMSMaterialClass"));
				quoteItemTO.setmUnitICMSInterEstadual(rs.getDouble("mUnitICMSInterEstadual"));
				quoteItemTO.setmUnitICMSInterEstadualMaterialImportado(rs.getDouble("mUnitICMSIntEstMatImportado"));
				quoteItemTO.setmUnitICMSARecuperar(rs.getDouble("mUnitICMSARecuperar"));
				quoteItemTO.setmUnitICMSProprioARecuperar(rs.getDouble("mUnitICMSProprioARecuperar"));
				quoteItemTO.setmUnitICMSST(rs.getDouble("mUnitICMSST"));
				quoteItemTO.setmUnitIPI(rs.getDouble("mUnitIPI"));
				quoteItemTO.setmUnitIPIRecoverable(rs.getDouble("mUnitIPIRecoverable"));
				quoteItemTO.setmUnitPIS(rs.getDouble("mUnitPIS"));
				quoteItemTO.setmUnitCofins(rs.getDouble("mUnitCofins"));
				quoteItemTO.setmUnitIR(rs.getDouble("mUnitIR"));
				quoteItemTO.setmUnitISS(rs.getDouble("mUnitISS"));
				quoteItemTO.setmICMSEstadoOrigem(rs.getDouble("mICMSEstadoOrigem"));
				quoteItemTO.setmICMSEstadoOrigemInterno(rs.getDouble("mICMSEstadoOrigemInterno"));
				quoteItemTO.setmICMSEstadoDestino(rs.getDouble("mICMSEstadoDestino"));
				quoteItemTO.setmICMSMaterialClass(rs.getDouble("mICMSMaterialClass"));
				quoteItemTO.setmICMSInterEstadual(rs.getDouble("mICMSInterEstadual"));
				quoteItemTO.setmICMSInterEstadualMaterialImportado(rs.getDouble("mICMSIntEstMatImportado"));
				quoteItemTO.setmICMSARecuperar(rs.getDouble("mICMSARecuperar"));
				quoteItemTO.setmICMSProprioARecuperar(rs.getDouble("mICMSProprioARecuperar"));
				quoteItemTO.setmICMSST(rs.getDouble("mICMSST"));
				quoteItemTO.setmIPI(rs.getDouble("mIPI"));
				quoteItemTO.setmIPIReceber(rs.getDouble("mIPIReceber"));
				quoteItemTO.setmPIS(rs.getDouble("mPIS"));
				quoteItemTO.setmCOFINS(rs.getDouble("mCOFINS"));
				quoteItemTO.setmIR(rs.getDouble("mIR"));
				quoteItemTO.setmCSSL(rs.getDouble("mCSSL"));
				quoteItemTO.setmISS(rs.getDouble("mISS"));
				quoteItemTO.setmTaxesRecoverableMargin(rs.getDouble("rTaxesRecoverableMargin"));
				quoteItemTO.setrMarginItem(rs.getFloat("rMarginItem"));
				quoteItemTO.setmTotalTaxes(rs.getFloat("mTotalTaxes"));
				quoteItemTO.setmBaseCalculoST(rs.getFloat("mBaseCalculoST"));
				quoteItemTO.setmUnitGrossPrice(rs.getFloat("mUnitGrossPrice"));
				quoteItemTO.setmGrossPrice(rs.getFloat("mGrossPrice"));
				quoteItemTO.setiCalculationModel(rs.getInt("iCalculationModel"));
				quoteItemTO.setsCalculationMemoryMaterial(rs.getString("sCalculationMemoryMaterial"));
					
					
				listaQuoteItemTOs.add(quoteItemTO);
			}
									
		}catch(Exception e){
		
			e.printStackTrace();
		
		}finally{
			if(rs != null){
				try{
					rs.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
			
			if (callableStatement != null) {
				try{
					callableStatement.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
 
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection(); 
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		return listaQuoteItemTOs;		
		
	}

	@Override
	public QuoteModel selectRate(QuoteModel quoteModel){
		
		String sqlQueryRate = "select coalesce(r.rPis, 0) as rPis, "
			+ "coalesce(r.rCofins, 0) as rCofins, "
			+ "coalesce(r.fFixedTaxRate, 0) as fFixedTaxRate "
			+ "from tbAdmRate r"
			+ " where r.id = 1";
		
		Connection conn = super.getConnection();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			stmt = conn.prepareStatement(sqlQueryRate);
			
			 rs = stmt.executeQuery();
			
			if(rs.next()){
				
				quoteModel.setDblrMaiorPIS(Float.parseFloat(rs.getString("rPis")));
				quoteModel.setDblrMaiorCofins(Float.parseFloat(rs.getString("rCofins")));
				quoteModel.setBlnFixedTaxRate(Float.parseFloat(rs.getString("fFixedTaxRate")));
				
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			if(rs != null){
				try{
					rs.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
			
			if (stmt != null) {
				try{
					stmt.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
 
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		return quoteModel;
		
	}
	
	@Override
	public QuoteModel selectProductType(QuoteModel quoteModel) {
		
		String sqlQueryProductType = "select MAX(coalesce(pt.rIr, 0)) As rIR, "
				   + "MAX(coalesce(pt.rCSSL, 0)) AS rCSSL, "
				   + "MAX(coalesce(pt.rPIS, 0)) AS rPIS, "
				   + "MAX(coalesce(pt.rCOFINS, 0)) AS rCOFINS "
				   + "from tbAdmProductType pt";
		
		Connection conn = super.getConnection();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			stmt = conn.prepareStatement(sqlQueryProductType);
			
			 rs = stmt.executeQuery();
			
			if(rs.next()){
				
				quoteModel.setDblrMaiorIR(Float.parseFloat(rs.getString("rIR")));
				quoteModel.setDblrMaiorCSSL(Float.parseFloat(rs.getString("rCSSL")));
				
				if(Float.parseFloat(rs.getString("rPIS")) > quoteModel.getDblrMaiorPIS()){
					quoteModel.setDblrMaiorPIS(Float.parseFloat(rs.getString("rPIS")));
				}
				
				if(Float.parseFloat(rs.getString("rCOFINS")) > quoteModel.getDblrMaiorCofins()){
					quoteModel.setDblrMaiorCofins(Float.parseFloat(rs.getString("rCOFINS")));
				}
				
			}
			
		}catch(Exception e){
			e.printStackTrace();
			
		}finally{
			if(rs != null){
				try{
					rs.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
			
			if (stmt != null) {
				try{
					stmt.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
 
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection(); 
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		return quoteModel;
	}
	
	
	@Override
	public QuoteModel selectMaterialClass(QuoteModel quoteModel) {
		
		String sqlQueryMaterialClass = "select MAX(coalesce(rIPI, 0)) AS rIPI from tbAdmMaterialClass";
		
		Connection conn = super.getConnection();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			stmt = conn.prepareStatement(sqlQueryMaterialClass);
			
			rs = stmt.executeQuery();
			
			if(rs.next()){
				
				quoteModel.setDblrMaiorIPI(Float.parseFloat(rs.getString("rIPI")));
				
			}
			
		}catch(Exception e){
			e.printStackTrace();
			
		}finally{
			if(rs != null){
				try{
					rs.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
			
			if (stmt != null) {
				try{
					stmt.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
 
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		return quoteModel;
	}
	
	
	@Override
	public QuoteModel selectISS(QuoteModel quoteModel) {
		
		String sqlQueryISS = "select MAX(rISS) AS rISS "
				   + "from ( select MAX(rISS) AS rISS "
				   			+ "from tbAdmOrigin "
							+ "UNION "
							+ "select MAX(rISSEspecial) AS rISS "
							+ "from tbAdmOrigin "
						+ ") MaiorISS";
		
		Connection conn = super.getConnection();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			stmt = conn.prepareStatement(sqlQueryISS);
			
			 rs = stmt.executeQuery();
			
			if(rs.next()){
				
				quoteModel.setDblrMaiorISS(Float.parseFloat(rs.getString("rISS")));
				
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			if(rs != null){
				try{
					rs.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
			
			if (stmt != null) {
				try{
					stmt.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
 
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		return quoteModel;
	}
	
	
	@Override
	public QuoteModel selectDefaultTaxes(QuoteModel quoteModel) {
		
		String sqlQueryDefaultTaxes = "select coalesce(rISSStandard, 0) AS rISSStandard, "
				+ "coalesce(rISSStandardMTEsp, 0) AS rISSStandardMTEsp, "
				+ "coalesce(fAbsoluteZeroModel, 0) AS fAbsoluteZeroModel, "
				+ "coalesce(rICMSEntradaPadrao, 0) AS rICMSEntradaPadrao, "
				+ "coalesce(rICMSSaidaPadrao, 0) AS rICMSSaidaPadrao, "
				+ "coalesce(rFatorRelevanciaMaxima, 0) AS rFatorRelevanciaMaxima, "
				+ "coalesce(rSuggestedMargin, 0) AS rSuggestedMargin "
				+ "from tbAdmQuoteParameters where id = 1";
		
		Connection conn = super.getConnection();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			stmt = conn.prepareStatement(sqlQueryDefaultTaxes);
			
			 rs = stmt.executeQuery();
			
			if(rs.next()){
			
				quoteModel.setrISSStandard(Float.parseFloat(rs.getString("rISSStandard")));
				quoteModel.setrISSStandardMTESp(Float.parseFloat(rs.getString("rISSStandardMTEsp")));
				quoteModel.setfAbsoluteZeroModel(Boolean.parseBoolean(rs.getString("fAbsoluteZeroModel")));
				quoteModel.setrICMSEntradaPadrao(Float.parseFloat(rs.getString("rICMSEntradaPadrao")));
				quoteModel.setrICMSSaidaPadrao(Float.parseFloat(rs.getString("rICMSSaidaPadrao")));
				quoteModel.setrFatorRelevanciaMaxima(Float.parseFloat(rs.getString("rFatorRelevanciaMaxima")));
				quoteModel.setrSuggestedMarginDefault(Float.parseFloat(rs.getString("rSuggestedMargin")));
				
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			if(rs != null){
				try{
					rs.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
			
			if (stmt != null) {
				try{
					stmt.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
 
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		return quoteModel;
	}
	
	
	@Override
	public QuoteModel selectICMSIPI(QuoteModel quoteModel) {
		
		String sqlQueryICMSIPI = "select MAX(i.rICMS) AS rICMS, MAX(i.rIPI) AS rIPI "
				+ "from ( "
				+ "select MAX(c.rICMS) AS rICMS, MAX(c.rIPI) AS rIPI "
				+ "from tbAdmMaterialCLass c "
				+ "UNION "
				+ "select "
				+ "MAX(d.rICMS) AS rICMS, 0 AS rIPI "
				+ "from tbAdmDestination d "
				+ "UNION "
				+ "select MAX(x.RIVAMATERIALIMPORTADO) AS rICMS, 0 AS rIPI "
				+ "from tbAdmMaterialClassXDestination x "
				+ "UNION "
				+ "select MAX(x.rIVA) AS rICMS, 0 AS rIPI "
				+ "from tbAdmMaterialClassXDestination x "
				+ ") i";
		
		Connection conn = super.getConnection();
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			stmt = conn.prepareStatement(sqlQueryICMSIPI);
			
			rs = stmt.executeQuery();
			
			if(rs.next()){
				
				quoteModel.setDblrMaiorICMS(Float.parseFloat(rs.getString("rICMS")));
				
				if(Float.parseFloat(rs.getString("rIPI")) > quoteModel.getDblrMaiorIPI()){
					quoteModel.setDblrMaiorIPI(Float.parseFloat(rs.getString("rIPI")));
				}
				
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			if(rs != null){
				try{
					rs.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
			
			if (stmt != null) {
				try{
					stmt.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
 
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		return quoteModel;
	}
	
	
	
	
	
	@Override
	public Object simpleQuery(String sqlQuery) throws SQLException {
		return null;
	}
	
	
	
	
	@Override
	public void salvarAtributos(QuoteModel quoteModel) {

		Connection conn = super.getConnection();

		PreparedStatement stmt = null;

		try {
			for (QuoteItemTO itemTO : quoteModel.getListaQuoteItemTO()) {
				StringBuilder sqlQuery = new StringBuilder();
				sqlQuery.append("UPDATE tbTaxQuoteItem SET ");
				sqlQuery.append( "idTaxQuoteItemPai = "+ (itemTO.getIdTaxQuoteItem() == 0 ? null : itemTO.getIdTaxQuoteItem()) +", ");
				sqlQuery.append( "idAdmMaterial = "+ (itemTO.getIdAdmMaterial() == 0 ? null : itemTO.getIdAdmMaterial()) +", ");
				
				if(itemTO.getiTaxModel() == 1){
					sqlQuery.append( "idAdmOrigin = "+ (itemTO.getIdAdmOriginHW() == 0 ? null : itemTO.getIdAdmOriginHW() )+", ");
				}else if(itemTO.getiTaxModel() == 2){
					sqlQuery.append( "idAdmOrigin = "+ (itemTO.getIdAdmOriginSW() == 0 ? null : itemTO.getIdAdmOriginSW() )+", ");
				}else if(itemTO.getiTaxModel() == 3){
					sqlQuery.append( "idAdmOrigin = "+ (itemTO.getIdAdmOrigin() == 0 ? null : itemTO.getIdAdmOrigin() )+", ");
				}
				
				if(itemTO.getiLineNumber() == 0){
					sqlQuery.append(" rQTY = "+itemTO.getrQty()+",");
					sqlQuery.append(" mImportedCost = "+ (itemTO.getmImportedCost() / itemTO.getrQty())+", ");
				}
				
				sqlQuery.append( "idAdmDestination = "+ (itemTO.getIdAdmDestination() == 0 ? null : itemTO.getIdAdmDestination())+", ");
				sqlQuery.append( "idAdmMaterialClass = "+( itemTO.getIdAdmMaterialClass() == 0 ? null : itemTO.getIdAdmMaterialClass())+", ");
				sqlQuery.append( "idAdmProductType =  "+ (itemTO.getIdAdmProductType() == 0 ? null : itemTO.getIdAdmProductType())+", ");
				sqlQuery.append( "fLMType = "+ itemTO.getfLMType() +", ");
				sqlQuery.append( "fAvaliable = "+ itemTO.getfAvailable() +", ");
				sqlQuery.append( "fSubstituicaoTributariaEntrada = "+ itemTO.getfSubstituicaoTributariaEntrada() +", ");
				sqlQuery.append( "fSubstituicaoTributariaSaida = "+ itemTO.getfSubstituicaoTributariaSaida() +", ");
				sqlQuery.append( "fISSEspecial = "+ itemTO.getfISSEspecial() +", ");
				sqlQuery.append("sLabelProductType = '"+ itemTO.getsLabelProductTypePT() +"', ");
				sqlQuery.append( "sNCM = '"+itemTO.getsNCMMaterialClass()+"', ");
				sqlQuery.append( "sModel = '"+itemTO.getsModelMaterial()+"', ");
				sqlQuery.append( "sDescription = '"+ itemTO.getsDescription() +"', ");
				sqlQuery.append( "mCostCalculated = "+ itemTO.getmCostCalculated() +", ");
				sqlQuery.append( "mSuggestedMargin = "+ itemTO.getmSuggestedMargin() +", ");
				sqlQuery.append( "mUnitSuggestedNetPrice = "+ itemTO.getmUnitSuggestedNetPrice() +", ");
				sqlQuery.append( "mNetPrice = "+ itemTO.getmNetPrice() +", ");
				sqlQuery.append( "mUnitNetPrice = "+ itemTO.getmUnitNetPrice() +", ");
				sqlQuery.append( "mNetPriceBaseDeCalculo = "+ itemTO.getmNetPriceBaseDeCalculo() +", ");
				sqlQuery.append( "rSuggestedMargin = "+ itemTO.getrSuggestedMargin() +", ");
				sqlQuery.append( "rDiscount = "+ (itemTO.getrDiscount() / 100)+", ");
				sqlQuery.append( "mFatorCustoST = "+ itemTO.getmFatorCustoST() +", ");
				sqlQuery.append("mFatorEntrada = "+ itemTO.getmFatorEntrada() +", ");
				sqlQuery.append( "rFatorSaida = "+ itemTO.getrFatorSaida() +", ");
				sqlQuery.append( "rICMSRecuperar = "+ itemTO.getrICMSRecuperar() +", ");
				sqlQuery.append( "rICMSEstadoOrigemInterno = "+ itemTO.getrICMSEstadoOrigemInterno() +", ");
				sqlQuery.append( "rICMSEstadoDestino = "+ itemTO.getrICMSEstadoDestinoDestination() +", ");
				sqlQuery.append( "rICMSMaterialClass = "+ itemTO.getrICMSMaterialClassMaterialClass() +", ");
				sqlQuery.append( "rICMSInterEstadual = "+ itemTO.getrICMSInterEstadualDestination()+", ");
				sqlQuery.append( "rICMSInterEstlMatImport = "+ itemTO.getrICMSInterEstadualMaterialImportadoDestination() +", ");
				sqlQuery.append( "rIPI = "+  itemTO.getrIPIMaterialClass() + ", ");
				sqlQuery.append( "rPIS = "+  itemTO.getrPISProductType() + ", ");
				sqlQuery.append( "rCofins = "+ itemTO.getrCOFINSProductType()+", ");
				sqlQuery.append( "rIR = "+itemTO.getrIRProductType() +", ");
				sqlQuery.append( "rCSSL = "+itemTO.getrCSSLProductType()  +", ");
				sqlQuery.append( "rISS = "+ (itemTO.getrISS() / 100)+", ");
				sqlQuery.append( "rIVA = "+ (itemTO.getrIVAMaterialClassDestination() / 100)+", ");
				sqlQuery.append( "rIVAMaterialImportado = "+ itemTO.getrIVAMaterialImportadoMaterialClassDestination() +", ");
				sqlQuery.append( "mUnitICMSEstadoDestino = "+ itemTO.getmUnitICMSEstadoDestino() +", ");
				sqlQuery.append( "mUnitICMSMaterialClass = "+ itemTO.getmUnitICMSMaterialClass() +", ");
				sqlQuery.append( "mUnitICMSInterEstadual = "+ itemTO.getmUnitICMSInterEstadual() +", ");
				sqlQuery.append( "mUnitICMSInterEstMatImport = "+ itemTO.getmUnitICMSInterEstadualMaterialImportado() +", ");
				sqlQuery.append( "mUnitICMSST = "+ itemTO.getmUnitICMSST() +", ");
				sqlQuery.append( "mUnitIPI = "+ itemTO.getmUnitIPI() + ", ");
				sqlQuery.append( "mUnitPIS = "+ itemTO.getmUnitPIS() + ", ");
				sqlQuery.append( "mUnitCofins = "+ itemTO.getmUnitCofins() + ", ");
				sqlQuery.append( "mUnitISS = "+ itemTO.getmUnitISS() +", ");
				sqlQuery.append( "mUnitIR = "+ itemTO.getmUnitIR() +", ");
				sqlQuery.append( "mUnitCSSL = "+ itemTO.getmUnitCSSL() +", ");
				sqlQuery.append( "mICMSEstadoDestino = "+ itemTO.getmICMSEstadoDestino() +", ");
				sqlQuery.append( "mICMSMaterialClass = "+ itemTO.getmICMSMaterialClass() +", ");
				sqlQuery.append( "mICMSInterEstadual = "+ itemTO.getmICMSInterEstadual() +", ");
				sqlQuery.append( "mICMSInterEstadualMatImport = "+ itemTO.getmICMSInterEstadualMaterialImportado() +", ");
				sqlQuery.append( "mICMSARecuperar = "+ itemTO.getmICMSARecuperar() +", ");
				sqlQuery.append( "mICMSProprioARecuperar = "+ itemTO.getmICMSProprioARecuperar() +", ");
				sqlQuery.append( "mIPI = "+ itemTO.getmIPI() +", ");
				sqlQuery.append( "mPIS = "+ itemTO.getmPIS() +", ");
				sqlQuery.append( "mCOFINS = "+ itemTO.getmCOFINS() +", ");
				sqlQuery.append( "mISS = "+ itemTO.getmISS() +", ");
				sqlQuery.append( "mIR = "+ itemTO.getmIR() +", ");
				sqlQuery.append( "mCSSL = "+ itemTO.getmCSSL() +", ");
				sqlQuery.append( "mTotalTaxes = "+ itemTO.getmTotalTaxes() +", ");
				sqlQuery.append( "mUnitGrossPrice = "+ itemTO.getmUnitGrossPrice() +", ");
				sqlQuery.append( "mGrossPrice = "+ itemTO.getmGrossPrice() +", ");
				sqlQuery.append( "iTaxModel = "+ itemTO.getiTaxModel() +", ");
				sqlQuery.append( "iCalculationModel = "+ itemTO.getiCalculationModel() +", ");
				sqlQuery.append( "sCalculationMemoryMaterial = '"+ itemTO.getsCalculationMemoryMaterial() +"' ");
				sqlQuery.append( "WHERE ID = "+ itemTO.getId());

				stmt = conn.prepareStatement(sqlQuery.toString().replace("'null'", "null"));

				stmt.executeUpdate();

				try {
					stmt.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
				
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (stmt != null) {
				try {
					stmt.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			if (conn != null) {
				try {
					conn.close();
					super.closeConnection();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	

	@Override
	public void updateQuery(String sqlQuery) throws SQLException {
		
		Connection conn = super.getConnection();
		
		PreparedStatement stmt;

		stmt = conn.prepareStatement(sqlQuery);
		
		try{
			stmt.executeUpdate();
			
		}catch(Exception e){
			e.printStackTrace();
			
		}finally{
			if(stmt != null){
				try{
					stmt.close();
				}catch(Exception e){
					e.printStackTrace();
				}
			}
			
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}		
	}

	@Override
	public Float selectMaxIvaByNCM(String ncm) {
		
		Float IVA = 0F;
		
		String sqlQuery ="select  MAX(mcde.rivamaterialimportado) as IVA from TBADMMATERIALCLASSXDESTINATION mcde "
								+ "Join TBADMMATERIALCLASS mc "
								+ "on mc.id = mcde.IDADMMATERIALCLASS "
								+ "where mc.SNCM = ?";
		
		Connection conn = super.getConnection();
		
		PreparedStatement stmt = null;
		
		ResultSet rs = null;
		
		try {
			
			stmt = conn.prepareStatement(sqlQuery);
			
			stmt.setString(1, ncm);
			
			rs = stmt.executeQuery();
			
			if(rs.next()){
				IVA = rs.getFloat("IVA");
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			if(rs != null){
				try{
					rs.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
			
			if (stmt != null) {
				try{
					stmt.close();
				}catch(Exception e1){
					e1.printStackTrace();
				}
			}
 
			if (conn != null) {
				try {
					conn.close();
					super.closeConnection();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		
		return IVA;
	}	
	
}
